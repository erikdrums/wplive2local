#!/usr/bin/env python

import sys
import os
import os.path
import syslog
import errno
import logging
import subprocess
import yaml
from bunch import Bunch

def main(argv):
    HOME_PATH = os.path.expanduser('~')
    CONFIG_PATH = os.path.join(HOME_PATH, '.wplive2local_conf')
    initial = False

    lock_tables_arg = '--lock-tables=true'
    if '--lock-tables-false' in argv:
        lock_tables_arg = '--lock-tables=false'
        
    try:
        configurations = yaml.load(open(CONFIG_PATH).read())
    except IOError:
        print "No settings file"
        sys.exit()    
        
    conf = Bunch.fromDict(configurations)
    local = conf.local
    sites = conf.sites
    
    try:
        site = argv[0]
        site_conf = sites[site]
        site_local = site_conf.local
        site_production = site_conf.production

        wp_table_prefix = site_local.get('wp_table_prefix', 'wp_')
        production_db_pass = site_production.get('db_password', '')
    except KeyError:
        print "This is not a configured site"
        sys.exit()    


    def _build_query(user, password, runtype, host='localhost', database=None):
        
        if database is None:
            database = ''
        return "{} -u{} -p{} {} -h{}".format(runtype, user, password, database, host)

    def _build_query_command(user, password, query_command, runtype, host, database=None):
        query = _build_query(user, password, runtype, host, database)
        return "{} -e '{}'".format(query, query_command)


    def _run_query(user, password, query, runtype, host='localhost', database=None):
        os.popen(_build_query_command(user, password, query, runtype, host, database))

    def local_db_dump():
        dump_query = " --opt -c " + site_local.db + " > " + site_local.backup_path + ".sql"
        query_command = "{} -e --opt -c {} {} > {}.sql".format(
                    _build_query(local.db_user, local.db_password, local.mysqldump), 
                            lock_tables_arg, site_local.db, site_local.backup_path)
        os.popen(query_command)
    
    def local_db_drop():
        dump_query = "drop database {}".format(site_local.db)
        _run_query(local.db_user, local.db_password, dump_query, local.mysql)    

    def local_db_create():
        dump_query = "create database {}".format(site_local.db)
        _run_query(local.db_user, local.db_password, dump_query, local.mysql)    

    
    def production_dump_to_local():
        production_query = _build_query(site_production.db_user, 
            production_db_pass, 'mysqldump', site_production.host, site_production.db)
        local_query = _build_query(local.db_user, local.db_password, 
                                                local.mysql, database=site_local.db)
        command = "ssh {}@{} '{} {} | gzip -9' | gzip -d | {}".format(
                            site_production.ssh_user, site_production.ssh_address, 
                                    production_query, lock_tables_arg, local_query)
        os.popen(command)


    def local_update_urls():
        query = _build_query(local.db_user, local.db_password, local.mysql, 
                                                                database=site_local.db)
    
        query_command = """ "UPDATE {2}options 
            SET option_value = replace(option_value, '{0}', '{1}')
            WHERE option_name = 'home' OR option_name = 'siteurl';
            UPDATE {2}posts SET guid = replace(guid, '{0}', '{1}');
            UPDATE {2}posts SET post_content = replace(post_content, '{0}', '{1}');
            UPDATE {2}postmeta SET meta_value = replace(meta_value, '{0}', '{1}');";
        """.format(site_production.url, site_local.url, wp_table_prefix) 
        os.popen("{} -Bse {}".format(query, query_command))    


    def local_set_password():
        query = """UPDATE {}users SET user_pass = MD5("{}") WHERE ID=1 LIMIT 1;
                            """.format(wp_table_prefix, local.site_password, '{}')
        _run_query(local.db_user, local.db_password, query, local.mysql, 
                                                                database=site_local.db)   

    if '--init' in argv:
        initial = True

    print "Begin Migration"

    if not initial:
        pass
        local_db_dump()
        local_db_drop()

    local_db_create()
    production_dump_to_local()
    local_update_urls()
    local_set_password()

    print "SUCCESS"
 
if __name__ == "__main__":
  main(sys.argv[1:])
